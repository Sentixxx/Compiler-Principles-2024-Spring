--------T:---------
!=
(
)
*
+
,
-
/
;
<
<=
=
==
>
>=
DECI
INTC
and
break
else
float
id
if
int
or
return
str
string
while
{
}
--------NT:---------
ArgList
ArgListRest
AssignmentStmt
BreakStmt
CallStmt
CmpOp
CompExp
CompSt
ConditionalExp
ConditionalExpRest
ConditionalStmt
ConditionalStmtRest
Exp
ExpRest
ExtDef
ExtDefList
ExtDefP
ExtDefRest
Factor
FunDec
LocalVariableDeclaration
LocalVariableDeclarationRest
LoopStmt
Program
RelationExp
RelationExpRest
ReturnStmt
ReturnStmtRest
Stmt
StmtList
TYPE
Term
TermRest
VarList
VarListRest
idStmt
idStmtRest
-------FIRST:-------
EPSILON: 
VarList: EPSILON float int string 
ExpRest: + - EPSILON 
ArgListRest: , EPSILON 
AssignmentStmt: = 
str: str 
int: int 
RelationExp: ( DECI INTC id str 
id: id 
Factor: ( DECI INTC id str 
+: + 
{: { 
else: else 
break: break 
idStmtRest: ( = 
and: and 
Term: ( DECI INTC id str 
>: > 
<=: <= 
-: - 
DECI: DECI 
*: * 
FunDec: ( 
TYPE: float int string 
while: while 
ExtDefP: ( , ; 
or: or 
ReturnStmtRest: ( DECI EPSILON INTC id str 
INTC: INTC 
!=: != 
if: if 
Program: EPSILON float int string 
ConditionalExp: ( DECI INTC id str 
RelationExpRest: EPSILON and 
ExtDef: float int string 
): ) 
return: return 
Stmt: ; break float id if int return string while { 
>=: >= 
==: == 
float: float 
/: / 
<: < 
Exp: ( DECI INTC id str 
TermRest: * / EPSILON 
,: , 
=: = 
CompExp: ( DECI INTC id str 
ConditionalStmtRest: EPSILON else 
ArgList: ( DECI EPSILON INTC id str 
VarListRest: , EPSILON 
ConditionalExpRest: EPSILON or 
StmtList: ; EPSILON break float id if int return string while { 
(: ( 
ConditionalStmt: if 
ReturnStmt: return 
ExtDefList: EPSILON float int string 
CmpOp: != < <= == > >= 
}: } 
LoopStmt: while 
idStmt: id 
BreakStmt: break 
string: string 
LocalVariableDeclaration: float int string 
CompSt: { 
ExtDefRest: , EPSILON 
;: ; 
LocalVariableDeclarationRest: , EPSILON 
CallStmt: ( 
------Follow:-------
StmtList: } 
LocalVariableDeclarationRest: ; 
RelationExp: ) 
Stmt: } 
VarListRest: ) 
CompExp: ) 
CompSt: # } 
RelationExpRest: ) 
ArgListRest: ) 
CallStmt: } 
AssignmentStmt: } 
ExpRest: != ) ; < <= == > >= 
LoopStmt: } 
CmpOp: ( DECI INTC id str 
TermRest: != ) ; < <= == > >= 
Program: # 
ExtDefP: # 
BreakStmt: } 
LocalVariableDeclaration: } 
idStmtRest: } 
ExtDef: # 
ArgList: ) 
ConditionalExp: ) 
TYPE: id 
FunDec: { 
ConditionalExpRest: ) 
ExtDefRest: ; 
ReturnStmt: } 
ExtDefList: # 
ConditionalStmt: } 
ReturnStmtRest: ; 
idStmt: } 
ConditionalStmtRest: } 
VarList: ) 
Exp: != ) ; < <= == > >= 
Factor: != ) ; < <= == > >= 
Term: != ) ; < <= == > >= 
------Productions:------
0:RelationExpRest -> and CompExp RelationExpRest 
Select: 
1:RelationExpRest -> EPSILON 
Select: 
2:RelationExp -> CompExp RelationExpRest 
Select: 
3:ConditionalExpRest -> or RelationExp ConditionalExpRest 
Select: 
4:ConditionalExpRest -> EPSILON 
Select: 
5:Factor -> id 
Select: 
6:Factor -> INTC 
Select: 
7:Factor -> DECI 
Select: 
8:Factor -> str 
Select: 
9:Factor -> ( Exp ) 
Select: 
10:TermRest -> * Factor TermRest 
Select: 
11:TermRest -> / Factor TermRest 
Select: 
12:TermRest -> EPSILON 
Select: 
13:StmtList -> Stmt StmtList 
Select: 
14:StmtList -> EPSILON 
Select: 
15:Stmt -> ConditionalStmt 
Select: 
16:Stmt -> LoopStmt 
Select: 
17:Stmt -> idStmt 
Select: 
18:Stmt -> ReturnStmt 
Select: 
19:Stmt -> BreakStmt 
Select: 
20:Stmt -> LocalVariableDeclaration 
Select: 
21:Stmt -> CompSt 
Select: 
22:Stmt -> ; 
Select: 
23:CompSt -> { StmtList } 
Select: 
24:CompExp -> Exp CmpOp Exp 
Select: 
25:VarListRest -> , TYPE id VarListRest 
Select: 
26:VarListRest -> EPSILON 
Select: 
27:ExtDefP -> ExtDefRest ; 
Select: 
28:ExtDefP -> FunDec CompSt 
Select: 
29:LocalVariableDeclarationRest -> , id LocalVariableDeclarationRest 
Select: 
30:LocalVariableDeclarationRest -> EPSILON 
Select: 
31:CallStmt -> ( ArgList ) ; 
Select: 
32:FunDec -> ( VarList ) 
Select: 
33:TYPE -> int 
Select: 
34:TYPE -> float 
Select: 
35:TYPE -> string 
Select: 
36:Program -> ExtDefList 
Select: 
37:ExtDefRest -> , id ExtDefRest 
Select: 
38:ExtDefRest -> EPSILON 
Select: 
39:CmpOp -> < 
Select: 
40:CmpOp -> <= 
Select: 
41:CmpOp -> > 
Select: 
42:CmpOp -> >= 
Select: 
43:CmpOp -> == 
Select: 
44:CmpOp -> != 
Select: 
45:LoopStmt -> while ( ConditionalExp ) Stmt 
Select: 
46:ConditionalExp -> RelationExp ConditionalExpRest 
Select: 
47:ExtDef -> TYPE id ExtDefP 
Select: 
48:idStmtRest -> CallStmt 
Select: 
49:idStmtRest -> AssignmentStmt 
Select: 
50:ArgList -> Exp ArgListRest 
Select: 
51:ArgList -> EPSILON 
Select: 
52:ArgListRest -> , Exp ArgListRest 
Select: 
53:ArgListRest -> EPSILON 
Select: 
54:AssignmentStmt -> = Exp ; 
Select: 
55:ExpRest -> + Term ExpRest 
Select: 
56:ExpRest -> - Term ExpRest 
Select: 
57:ExpRest -> EPSILON 
Select: 
58:ExtDefList -> ExtDef ExtDefList 
Select: 
59:ExtDefList -> EPSILON 
Select: 
60:ReturnStmt -> return ReturnStmtRest ; 
Select: 
61:ConditionalStmt -> if ( ConditionalExp ) Stmt ConditionalStmtRest 
Select: 
62:ReturnStmtRest -> Exp 
Select: 
63:ReturnStmtRest -> EPSILON 
Select: 
64:idStmt -> id idStmtRest 
Select: 
65:ConditionalStmtRest -> else Stmt 
Select: 
66:ConditionalStmtRest -> EPSILON 
Select: 
67:LocalVariableDeclaration -> TYPE id LocalVariableDeclarationRest ; 
Select: 
68:BreakStmt -> break ; 
Select: 
69:VarList -> TYPE id VarListRest 
Select: 
70:VarList -> EPSILON 
Select: 
71:Exp -> Term ExpRest 
Select: 
72:Term -> Factor TermRest 
Select: 
------Table:------
!=|(|)|*|+|,|-|/|;|<|<=|=|==|>|>=|DECI|INTC|and|break|else|float|id|if|int|or|return|str|string|while|{|}|
ArgList:) --> Exp ArgListRest  || 
ArgListRest:) --> , Exp ArgListRest  || , --> , Exp ArgListRest  || 
AssignmentStmt:; --> = Exp ;  || = --> = Exp ;  || 
BreakStmt:; --> break ;  || break --> break ;  || 
CallStmt:( --> ( ArgList ) ;  || ) --> ( ArgList ) ;  || ; --> ( ArgList ) ;  || } --> ( ArgList ) ;  || 
CmpOp:!= --> !=  || < --> <  || <= --> <=  || == --> ==  || > --> >  || >= --> >=  || 
CompExp:
CompSt:{ --> { StmtList }  || Error!!!! } --> { StmtList }  || } --> { StmtList }  || 
ConditionalExp:) --> RelationExp ConditionalExpRest  || 
ConditionalExpRest:) --> or RelationExp ConditionalExpRest  || or --> or RelationExp ConditionalExpRest  || 
ConditionalStmt:( --> if ( ConditionalExp ) Stmt ConditionalStmtRest  || ) --> if ( ConditionalExp ) Stmt ConditionalStmtRest  || if --> if ( ConditionalExp ) Stmt ConditionalStmtRest  || } --> if ( ConditionalExp ) Stmt ConditionalStmtRest  || 
ConditionalStmtRest:else --> else Stmt  || 
Exp:!= --> Term ExpRest  || ) --> Term ExpRest  || ; --> Term ExpRest  || < --> Term ExpRest  || <= --> Term ExpRest  || == --> Term ExpRest  || > --> Term ExpRest  || >= --> Term ExpRest  || 
ExpRest:Error!!!! != --> + Term ExpRest  || != --> - Term ExpRest  || Error!!!! ) --> + Term ExpRest  || ) --> - Term ExpRest  || + --> + Term ExpRest  || - --> - Term ExpRest  || Error!!!! ; --> + Term ExpRest  || ; --> - Term ExpRest  || Error!!!! < --> + Term ExpRest  || < --> - Term ExpRest  || Error!!!! <= --> + Term ExpRest  || <= --> - Term ExpRest  || Error!!!! == --> + Term ExpRest  || == --> - Term ExpRest  || Error!!!! > --> + Term ExpRest  || > --> - Term ExpRest  || Error!!!! >= --> + Term ExpRest  || >= --> - Term ExpRest  || 
ExtDef:id --> TYPE id ExtDefP  || 
ExtDefList:
ExtDefP:; --> ExtDefRest ;  || 
ExtDefRest:, --> , id ExtDefRest  || ; --> , id ExtDefRest  || id --> , id ExtDefRest  || 
Factor:( --> ( Exp )  || ) --> ( Exp )  || DECI --> DECI  || INTC --> INTC  || id --> id  || str --> str  || 
FunDec:( --> ( VarList )  || ) --> ( VarList )  || { --> ( VarList )  || 
LocalVariableDeclaration:; --> TYPE id LocalVariableDeclarationRest ;  || id --> TYPE id LocalVariableDeclarationRest ;  || } --> TYPE id LocalVariableDeclarationRest ;  || 
LocalVariableDeclarationRest:, --> , id LocalVariableDeclarationRest  || ; --> , id LocalVariableDeclarationRest  || id --> , id LocalVariableDeclarationRest  || 
LoopStmt:( --> while ( ConditionalExp ) Stmt  || ) --> while ( ConditionalExp ) Stmt  || while --> while ( ConditionalExp ) Stmt  || 
Program:
RelationExp:) --> CompExp RelationExpRest  || 
RelationExpRest:) --> and CompExp RelationExpRest  || and --> and CompExp RelationExpRest  || 
ReturnStmt:; --> return ReturnStmtRest ;  || return --> return ReturnStmtRest ;  || } --> return ReturnStmtRest ;  || 
ReturnStmtRest:
Stmt:; --> ;  || 
StmtList:} --> Stmt StmtList  || 
TYPE:float --> float  || int --> int  || string --> string  || 
Term:!= --> Factor TermRest  || ) --> Factor TermRest  || ; --> Factor TermRest  || < --> Factor TermRest  || <= --> Factor TermRest  || == --> Factor TermRest  || > --> Factor TermRest  || >= --> Factor TermRest  || 
TermRest:Error!!!! != --> * Factor TermRest  || != --> / Factor TermRest  || Error!!!! ) --> * Factor TermRest  || ) --> / Factor TermRest  || * --> * Factor TermRest  || / --> / Factor TermRest  || Error!!!! ; --> * Factor TermRest  || ; --> / Factor TermRest  || Error!!!! < --> * Factor TermRest  || < --> / Factor TermRest  || Error!!!! <= --> * Factor TermRest  || <= --> / Factor TermRest  || Error!!!! == --> * Factor TermRest  || == --> / Factor TermRest  || Error!!!! > --> * Factor TermRest  || > --> / Factor TermRest  || Error!!!! >= --> * Factor TermRest  || >= --> / Factor TermRest  || 
VarList:) --> TYPE id VarListRest  || id --> TYPE id VarListRest  || 
VarListRest:) --> , TYPE id VarListRest  || , --> , TYPE id VarListRest  || id --> , TYPE id VarListRest  || 
idStmt:id --> id idStmtRest  || 
idStmtRest:
